<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration xmlns="https://cm5.intertrust.ru/config" xmlns:act="https://cm5.intertrust.ru/config/action">
    <collection name="Employees" idField="id">
        <prototype>
            <![CDATA[
                select
                    e.id, e.name, e.position
                from
                    Employee e
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) 
            вместо названий колонок -->
        <counting-prototype>
            select count(*) from Employee e
            ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>

        <filter name="byDepartment">
            <!-- по умолчанию and, если перед условием нет других (только
                ключ. слово where), то условие опускаем -->
            <!-- {0} - это параметр фильтра, у одного фильтра может быть 
                несколько параметров -->
            <criteria placeholder="where-clause">
                <![CDATA[
                    e.department = {0}
                ]]>
            </criteria>
        </filter>

        <filter name="byDepartmentNames">
            <reference placeholder="from-clause">
                <![CDATA[
                    inner join department d on e.department = d.id
                ]]>
            </reference>

            <!-- по умолчанию and, если перед условием нет других (только ключ. слово where), то условие опускаем -->
            <!-- {0} - это параметр фильтра, у одного фильтра может быть несколько параметров -->
            <criteria placeholder="where-clause">
                <![CDATA[
                    d.name in ({0})
                ]]>
            </criteria>
        </filter>

        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    e.name = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byFirstLetter">
            <criteria placeholder="where-clause">
                <![CDATA[
                    e.name like {0} || '%'
                ]]>
            </criteria>
        </filter>
        <filter name="byNameAndPosition">
            <criteria placeholder="where-clause">
                <![CDATA[
                    e.name || e.position like {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="Departments" idField="id">
        <prototype>
            <![CDATA[
                    select
                        d.id, d.name, d.parentdepartment
                    from
                        Department d
                    where
                        1=1 ::where-clause
                ]]>
        </prototype>

        <counting-prototype>
            select count(*) from Department d
        </counting-prototype>
        <filter name="byOrganization">
            <criteria placeholder="where-clause">
                <![CDATA[
                    d.organization = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byId">
            <criteria placeholder="where-clause">
                <![CDATA[
                    d.id like {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    d.name like {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byParentDepartment">
            <criteria placeholder="where-clause">
                <![CDATA[
                    d.parentdepartment = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection-view name="departments_default_view" collection="Departments" is-default="true">
        <display>
            <column field="id" name="id" type="integer" sortable="false" search-filter="byId"/>
            <column field="name" name="Название" editable="false" type="string" sortable="true"
                    drill-down-style="combined-link" search-filter="byName">

                <child-collection-viewer filter="byDepartment"
                                         domain-object-type-to-create="Employee" bread-crumb="Сотрудник">
                    <collection-viewer>
                        <collection-ref name="Employees"/>
                        <default-sort-criteria column-field="name" order="desc"/>
                        <!--search-area-ref name="Employees-Search-Area"/>
                        <search-collection-ref name="Employees"/-->
                    </collection-viewer>
                </child-collection-viewer>
            </column>
        </display>
    </collection-view>

    <collection name="Organizations" idField="id">
        <prototype>
            <![CDATA[
                    select
                        o.id, o.name, o.created_date, o.created_by, o.boss as boss, s.name as status_name, e.name as boss_name,o.description,'Удалить' as act
                    from
                        Organization o
                    left join employee e
                        on e.id = o.boss
                    left join status s
                        on s.id = o.status
                        where
                    1 = 1 ::where-clause
                ]]>
        </prototype>
        <counting-prototype>
            select count(*) from Organization o
        </counting-prototype>
        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.name like {0}
                ]]>
            </criteria>
        </filter>
        <!--
        <filter name="byNames">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.name in ({0}, {1}, {2}, {3})
                ]]>
            </criteria>
        </filter>
        -->
        <filter name="byNames">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.name = 'Организация 1'
                ]]>
            </criteria>
        </filter>

        <filter name="nullValueFilter">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.description is not null
                ]]>
            </criteria>
        </filter>


        <filter name="byCreator">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.created_by = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byEmployee">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.boss  = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byStatus">
            <criteria placeholder="where-clause">
                <![CDATA[
                    s.name = {0}
                ]]>
            </criteria>
        </filter>

        <filter name="nullBossFilter">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.boss is null
                ]]>
            </criteria>
        </filter>

        <filter name="byCreatedDate">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.created_date >= {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byBossName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    e.name  = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byText">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.name like {0}
                ]]>
            </criteria>
        </filter>
    </collection>
    <collection name="OrganizationsDepartmentsEmployees" idField="id">
        <prototype>
            <![CDATA[
                   select
                        o.id as orgid, d.id , e.name, e.position
                        from Organization o
                        join Department d
                        on o.id = d.organization
                        join Employee e
                        on e.department = d.id
                        where
                    1=1 ::where-clause
                ]]>
        </prototype>
        <counting-prototype>
            select count(*) from Organization o
        </counting-prototype>
        <filter name="byDepAndOrg">
            <criteria placeholder="where-clause">
                <![CDATA[
                    o.id = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byNameAndPosition">
            <criteria placeholder="where-clause">
                <![CDATA[
                    e.name || e.position like {0}
                ]]>
            </criteria>
        </filter>
    </collection>
    <collection name="Cities" idField="id">
        <prototype>
            <![CDATA[
                select
                 ci.id,   ci.name, ci.population, ci.year_of_foundation, ci.latitude, ci.longitude, ci.square, ci.created_date
                from
                    city ci left outer join country co on ci.country = co.id
                     ::from-clause
                where
                    1 = 1 ::where-clause
            ]]>
        </prototype>
        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) вместо названий колонок -->
        <counting-prototype>
            select count(*) from city ci ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>

        <filter name="idsIncluded">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.id in ({0})
                ]]>
            </criteria>
        </filter>
        <filter name="withoutCountry">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.country is null
                ]]>
            </criteria>
        </filter>
        <filter name="idsExcluded">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.id not in ({0})
                ]]>
            </criteria>
        </filter>
        <filter name="byText">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.name like {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byNameforTableBrowser">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.name like {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.name like {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byPopulation">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.population > {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="CitiesWithoutCountry" idField="id">
        <prototype>
            <![CDATA[
                select
                 ci.id,   ci.name, ci.population, ci.year_of_foundation, ci.latitude, ci.longitude, ci.square
                from
                    city ci left outer join country co on ci.country = co.id
                     ::from-clause
                where
                    ci.country is null ::where-clause
            ]]>
        </prototype>
        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) вместо названий колонок -->
        <counting-prototype>
            select count(*) from city ci ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>

        <filter name="idsIncluded">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.id in ({0})
                ]]>
            </criteria>
        </filter>

        <filter name="idsExcluded">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.id not in ({0})
                ]]>
            </criteria>
        </filter>

        <filter name="byNameforTableBrowser">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ci.name like {0}
                ]]>
            </criteria>
        </filter>

    </collection>
    <collection name="Notifications" idField="id">
        <prototype>
            <![CDATA[
                select
                    n.id, n.subject, n.body, n.new, n."from", n."to", n."context_object",
                    sender.firstname as sender, addressee.firstname as addressee
                from
                    notification n
                    left join person sender on sender.id = n."from"
                    left join person addressee on addressee.id = n."to"
                    ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>
        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) вместо названий колонок -->
        <counting-prototype>
            select count(*) from notification n ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>

        <filter name="idsIncluded">
            <criteria placeholder="where-clause">
                <![CDATA[
                    n.id in ({0})
                ]]>
            </criteria>
        </filter>
        <filter name="idsExcluded">
            <criteria placeholder="where-clause">
                <![CDATA[
                    n.id not in ({0})
                ]]>
            </criteria>
        </filter>
        <filter name="bySubject">
            <criteria placeholder="where-clause">
                <![CDATA[
                    n.subject like {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="NewNotifications" idField="id">
        <prototype>
            <![CDATA[
                select
                   n.id, n."from", n.subject, n.body, n."context_object"
                from
                    notification n
                    ::from-clause
                where
                    n.new = 1 ::where-clause
            ]]>
        </prototype>

        <counting-prototype>
            select count(*) from notification n ::from-clause WHERE n.new = 1 ::where-clause
        </counting-prototype>

        <filter name="byRecipient">
            <criteria placeholder="where-clause">
                <![CDATA[
                    n.to  in ({0})
                ]]>
            </criteria>
        </filter>

    </collection>

    <collection-view name="organizations_default_view" collection="Organizations" is-default="true">
        <display>

            <column field="id" name="id" type="integer" sortable="false"/>


            <column field="name" name="Название организации" editable="false" type="string" sortable="true"
                    search-filter="byName">
                <!-- если ID типа Organization, то вызывается данная коллекция -->
                <!-- если for-domain-object-type не указан, то данная коллекция используется "в последнюю очередь".
                 это удобно для случая, когда текущая коллекция содержит элементы только одного типа -->
                <!-- bread-crumb - название "хлебной крошки" для под-коллекции -->
                <child-collection-viewer for-domain-object-type="Organization" filter="byOrganization"
                                         domain-object-type-to-create="Department" bread-crumb="Подразделение">
                    <collection-viewer>
                        <collection-ref name="Departments"/>
                        <collection-view-ref name="departments_default_view"/>
                        <default-sort-criteria column-field="name" order="desc"/>
                    </collection-viewer>
                </child-collection-viewer>
            </column>

            <column field="act" name="Действие" type="string" sortable="false">
                <act:action-ref name-ref="aDelete" showImage="true"/>
            </column>

        </display>
    </collection-view>

    <collection name="Employees_2" idField="id">
        <generator class-name="employee.collection.test"/>
        <filter name="byName"/>
        <filter name="byDepartment"/>
    </collection>

    <collection name="Internal_Document" idField="id">
        <!--todo поддержка конвертации значений, например, в картинки -->
        <prototype>
            <![CDATA[
                select
                    i_doc.id, i_doc.name, i_doc.status, s.name as status_name
                from
                    Internal_Document i_doc 
                    inner join Status s on (i_doc.status = s.id)
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>
        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) 
            вместо названий колонок -->
        <counting-prototype>
            select count(*) from Internal_Document i_doc
            ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>
    </collection>

    <collection name="Negotiation_Card" idField="id">
        <!--todo поддержка конвертации значений, например, в картинки -->

        <prototype>
            <![CDATA[
                select
                    nc.id, nc.name, nc.status, nc.parent_document, nc.add_negotiation_card, nc.state
                from
                    Negotiation_Card nc
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) 
            вместо названий колонок -->
        <counting-prototype>
            select count(*) from Negotiation_Card nc
            ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>
        <filter name="byDoc">
            <criteria placeholder="where-clause">
                <![CDATA[
                    nc.parent_document = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byStatus">
            <reference placeholder="from-clause">
                <![CDATA[
                    inner join status s on nc.status = s.id
                ]]>
            </reference>
            <criteria placeholder="where-clause">
                <![CDATA[
                    s.name = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byParentNecotiationCard">
            <criteria placeholder="where-clause">
                <![CDATA[
                    nc.add_negotiation_card = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="onlyTopLevelCardByDoc">
            <criteria placeholder="where-clause">
                <![CDATA[
                    nc.parent_document = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="Examine_Card" idField="id">
        <!--todo поддержка конвертации значений, например, в картинки -->

        <prototype>
            <![CDATA[
                select
                    ec.id, ec.name, ec.status,ec.parent_document,ec.state
                from
                    Examine_Card ec
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) 
            вместо названий колонок -->
        <counting-prototype>
            select count(*) from Examine_Card ec
            ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>
        <filter name="byDoc">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ec.parent_document = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byStatus">
            <reference placeholder="from-clause">
                <![CDATA[
                    inner join status s on ec.status = s.id
                ]]>
            </reference>
            <criteria placeholder="where-clause">
                <![CDATA[
                    s.name = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="Resolution_Card" idField="id">
        <!--todo поддержка конвертации значений, например, в картинки -->

        <prototype>
            <![CDATA[
                select
                    rc.id, rc.name, rc.status,rc.parent_document,rc.state
                from
                    Resolution_Card rc
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) 
            вместо названий колонок -->
        <counting-prototype>
            select count(*) from Resolution_Card rc
            ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>
        <filter name="byDoc">
            <criteria placeholder="where-clause">
                <![CDATA[
                    rc.parent_document = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byStatus">
            <reference placeholder="from-clause">
                <![CDATA[
                    inner join status s on rc.status = s.id
                ]]>
            </reference>
            <criteria placeholder="where-clause">
                <![CDATA[
                    s.name = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="Assignment" idField="id">
        <!--todo поддержка конвертации значений, например, в картинки -->

        <prototype>
            <![CDATA[
                select
                    s.id, s.name, s.description, s.parent_document
                from
                    Assignment s
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) 
            вместо названий колонок -->
        <counting-prototype>
            select count(*) from Assignment s
            ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>
        <filter name="byDoc">
            <criteria placeholder="where-clause">
                <![CDATA[
                    s.parent_document = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="Outgoing_Document" idField="id">
        <!--todo поддержка конвертации значений, например, в картинки -->

        <prototype>
            <![CDATA[
                select
                    od.id, od.name, od.description, od.registration_date
                from
                    outgoing_document od
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) 
            вместо названий колонок -->
        <counting-prototype>
            select count(*) from outgoing_document od
            ::from-clause WHERE 1=1
            ::where-clause
        </counting-prototype>

    </collection>

    <collection name="GroupByName" idField="id">

        <prototype>
            <![CDATA[
                select
                    s.id
                from
                    User_Group s
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    s.group_name = {0}
                ]]>
            </criteria>
        </filter>
    </collection>


    <collection name="PersonInGroup" idField="id">

        <prototype>
            <![CDATA[
                select p.*
                from Person p
                inner join group_member gm on (gm.person_id = p.id)
                where 1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byGroup">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gm.usergroup = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="AllPersonInGroup" idField="id">

        <prototype>
            <![CDATA[
                select p.*
                from Person p
                inner join group_member gm on (gm.person_id = p.id)
                inner join group_group gg on (gg.child_group_id = gm.usergroup)
                where 1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byGroup">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gg.parent_group_id = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="IsPersonInGroup" idField="id">

        <prototype>
            <![CDATA[
                select gg.id
                from group_group gg
                inner join group_member gm on (gg.child_group_id = gm.usergroup)
                where 1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byGroupAndPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gg.parent_group_id = {0} and gm.person_id = {1}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="PersonGroups" idField="id">

        <prototype>
            <![CDATA[
                select ug.*
                from User_Group ug
                inner join group_group gg on (gg.parent_group_id = ug.id)
                inner join group_member gm on (gg.child_group_id = gm.usergroup)
                where 1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gm.person_id  = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="IsPersonInGroups" idField="person_id">

        <prototype>
            <![CDATA[
                select gm.person_id
                from group_member gm
                inner join group_group gg on gg.child_group_id = gm.usergroup
                inner join user_group ug on gg.parent_group_id = ug.id
                where 1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byGroupsAndPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ug.group_name in ({0}) and gm.person_id = {1}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="PersonTask" idField="id">

        <prototype>
            <![CDATA[
                select
                    t.id
                from
                    Person_Task t 
                    inner join Assignee_Person ap on (t.id = ap.persontask)
                    inner join Status s on (t.status = s.id)
                     ::from-clause
                where
                    s.name in ('Send', 'Acquired') ::where-clause
            ]]>
        </prototype>

        <filter name="byPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ap.person  = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byAttachment">
            <criteria placeholder="where-clause">
                <![CDATA[
                    t.mainattachment  = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byTask">
            <criteria placeholder="where-clause">
                <![CDATA[
                    t.id  = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="NotCompleteTask" idField="id">

        <prototype>
            <![CDATA[
                select
                    t.id
                from
                    Person_Task t
                    inner join Status s on (t.status = s.id)
                     
                     ::from-clause
                where
                    s.name in ('Send', 'Acquired') ::where-clause
            ]]>
        </prototype>

        <filter name="byExecutionIdAndTaskId">
            <criteria placeholder="where-clause">
                <![CDATA[
                    t.executionid = {0} and t.activityid = {1} 
                ]]>
            </criteria>
        </filter>
    </collection>


    <collection name="PersonGroupTask" idField="id">

        <prototype>
            <![CDATA[
                select
                    t.id
                from
                    Person_Task t
                    inner join assignee_group ag on (t.id = ag.persontask)
					inner join group_group gg on (ag.usergroup = gg.parent_group_id)
					inner join group_member gm on (gg.child_group_id = gm.usergroup)
                    inner join Status s on (t.status = s.id)
                     ::from-clause
                where
                     s.name in ('Send', 'Acquired')  ::where-clause
            ]]>
        </prototype>

        <filter name="byPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gm.person_id  = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byAttachment">
            <criteria placeholder="where-clause">
                <![CDATA[
                    t.mainattachment  = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byTask">
            <criteria placeholder="where-clause">
                <![CDATA[
                    t.id  = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="GroupInGroup" idField="id">

        <prototype>
            <![CDATA[
                select
                    gs.id
                from
                    group_group_settings gs
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byMembers">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gs.parent_group_id = {0} and gs.child_group_id = {1}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="AllGroupInGroup" idField="id">

        <prototype>
            <![CDATA[
                select
                    gs.id
                from
                    group_group gs
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byMembers">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gs.parent_group_id = {0} and gs.child_group_id = {1}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="AllParentGroups" idField="id">

        <prototype>
            <![CDATA[
                select
                    g.id
                from
                    User_Group g
                    inner join group_group gs on (g.id = gs.parent_group_id)
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byChild">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gs.child_group_id = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="ChildGroups" idField="id">

        <prototype>
            <![CDATA[
                select
                    g.*
                from
                    User_Group g
                    inner join group_group_settings gs on (g.id = gs.child_group_id)
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byParent">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gs.parent_group_id = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="AllChildGroups" idField="id">

        <prototype>
            <![CDATA[
                select
                    g.id
                from
                    User_Group g
                    inner join group_group gs on (g.id = gs.child_group_id)
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byParent">
            <criteria placeholder="where-clause">
                <![CDATA[
                    gs.parent_group_id = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="GroupGroup" idField="id">

        <prototype>
            <![CDATA[
                select
                    g.id
                from
                    group_group g
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byMember">
            <criteria placeholder="where-clause">
                <![CDATA[
                    g.parent_group_id = {0} and g.child_group_id = {1}
                ]]>
            </criteria>
        </filter>
    </collection>


    <collection name="GroupGroupSettings" idField="id">

        <prototype>
            <![CDATA[
                select
                    g.id
                from
                    group_group_settings g
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byMember">
            <criteria placeholder="where-clause">
                <![CDATA[
                    g.parent_group_id = {0} and g.child_group_id = {1}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="PersonGroup" idField="id">

        <prototype>
            <![CDATA[
                select
                    g.id
                from
                    Group_Member g
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byMember">
            <criteria placeholder="where-clause">
                <![CDATA[
                    g.usergroup = {0} and g.person_id = {1}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="NotificationText" idField="id">

        <prototype>
            <![CDATA[
                select
                    nt.id,
                    nt.notification_part,
                    nt.notification_text
                from
                    notification_text nt
                     ::from-clause
                where
                     1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byParams">
            <criteria placeholder="where-clause">
                <![CDATA[
                    nt.notification_type = {0}
                    and nt.channel = {1}
                    and nt.locale = {2}
                ]]>
            </criteria>
        </filter>
    </collection>

    <!-- collection name="ScheduleTasks" idField="id">

        <prototype>
            <![CDATA[
                select
                    sch.*
                from
                    schedule sch join status st on sch.status = st.id
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="notInStatus">
            <criteria placeholder="where-clause">
                <![CDATA[
                    st.name != {0}
                ]]>
            </criteria>
        </filter>

        <filter name="byStatus">
            <criteria placeholder="where-clause">
                <![CDATA[
                    st.name = {0}
                ]]>
            </criteria>
        </filter>

        <filter name="activeByStatus">
            <criteria placeholder="where-clause">
                <![CDATA[
                    st.name = {0} and sch.active = 1
                ]]>
            </criteria>
        </filter>

        <filter name="byNode">
            <criteria placeholder="where-clause">
                <![CDATA[
                    (sch.node_id = {0} or sch.all_nodes = 1) 
                ]]>
            </criteria>
        </filter>

    </collection-->

    <collection name="DynamicGroups" idField="id">

        <prototype>
            <![CDATA[
                select
                    ug.*
                from
                    User_Group ug ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byObjectIdAndGroupName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    ug.object_id = {0} and ug.group_name = {1}
                ]]>
            </criteria>
        </filter>

        <filter name="allParentGroups">
            <reference placeholder="from-clause">
                <![CDATA[
                    join group_group gg on gg.parent_group_id = ug.id
                ]]>
            </reference>

            <criteria placeholder="where-clause">
                <![CDATA[
                    gg.child_group_id = {0} and ug.id != {0}
                ]]>
            </criteria>
        </filter>

        <filter name="allChildGroups">
            <reference placeholder="from-clause">
                <![CDATA[
                    join group_group gg on gg.child_group_id = ug.id
                ]]>
            </reference>

            <criteria placeholder="where-clause">
                <![CDATA[
                    gg.parent_group_id = {0} and ug.id != {0}
                ]]>
            </criteria>
        </filter>

    </collection>

    <collection name="last_migration_log" idField="id">
        <prototype>
            <![CDATA[
                    select * from migration_log where sequence_number = (
                        select max(sequence_number) from migration_log
                        where 1=1 ::where-clause
                    )
            ]]>
        </prototype>
        <filter name="byModule">
            <criteria placeholder="where-clause">
                <![CDATA[
                    module_name = {0}
                ]]>
            </criteria>
        </filter>
    </collection>
    <collection name="bu_user_settings_collection" idField="id">
        <prototype>
            <![CDATA[
                    select bus.id, bus.theme, bus.splitter_orientation, bus.splitter_position, bus.nav_link, bus.application
                    from bu_user_settings bus
                    inner join Person p on (p.id = bus.person)
                    ::from-clause
                    where 1=1 ::where-clause
            ]]>
        </prototype>
        <counting-prototype>
            select count(*) from bu_user_settings bus bus ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>
        <filter name="byPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    p.login = {0}
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="bu_user_hip_settings_collection" idField="id">
        <prototype>
            <![CDATA[
                    select
                    hs.id,
                    hs.plugin_state_json,
                    hs.plugin_id
                    from bu_user_hip_settings hs
                    inner join Person p on (p.id = hs.person)
                    ::from-clause
                    where 1=1 ::where-clause
            ]]>
        </prototype>
        <counting-prototype>
            select count(*) from bu_user_hip_settings hs ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>

        <filter name="byPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    p.login = {0}
                ]]>
            </criteria>
        </filter>

        <filter name="byPid">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(hs.plugin_id) like upper({1})
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="bu_nav_link_collections" idField="id">
        <prototype>
            <![CDATA[
                select
                    blc.id, blc.collection_view, blc.collection_viewer, blc.application
                from
                    bu_nav_link_collection blc
                    inner join Person p on (blc.person = p.id)
                     ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>
        <!-- если запрос-счётчик отсутствует, то в select подставляется count(*) вместо названий колонок -->
        <counting-prototype>
            select count(*) from bu_nav_link_collection blc ::from-clause WHERE 1=1 ::where-clause
        </counting-prototype>

        <filter name="byLink">
            <criteria placeholder="where-clause">
                <![CDATA[
                    blc.link = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byCollectionViewName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    blc.collection_view_name = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byApplicationName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    blc.application = {0}
                ]]>
            </criteria>
        </filter>
        <filter name="byPerson">
            <criteria placeholder="where-clause">
                <![CDATA[
                    p.login = {0}
                ]]>
            </criteria>
        </filter>
    </collection>
    <collection name="reports" idField="id">

        <prototype>
            <![CDATA[
                select
                    id,
                    name,
                    description,
                    case when lockupdate = 0 then
                    'Да'
                    else 'Нет'
                    end as locked
                from
                    report_template ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(name) like(upper({0}))
                ]]>
            </criteria>
        </filter>

        <filter name="byDescription">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(description) like(upper({0}))
                ]]>
            </criteria>
        </filter>

    </collection>

    <collection name="resources" idField="id">
        <prototype>
            <![CDATA[
                SELECT
                    T1.id,
                    T1.resource_name,
                    T1.resource_value,
                    T1.resource_type,
                    T1.locale_name
                    FROM
                    (
                    SELECT
                    NR.id,
                    R.name AS resource_name,
                    L.name AS locale_name,
                    CAST(NR.number_value AS varchar) AS resource_value,
                    'Число' AS resource_type
                    FROM resources R
                    JOIN number_resources NR ON NR.id = R.id
                    LEFT JOIN locale L ON R.locale = L.id

                    UNION

                    SELECT
                    SR.id,
                    R.name AS resource_name,
                    L.name AS locale_name,
                    SR.string_value AS resource_value,
                    'Строка' AS resource_type
                    FROM resources R
                    JOIN string_resources SR ON SR.id = R.id
                    LEFT JOIN locale L ON R.locale = L.id

                    UNION

                    SELECT
                    BR.id,
                    R.name AS resource_name,
                    L.name AS locale_name,
                    BRA.name AS resource_value,
                    'Файл' AS resource_type
                    FROM resources R
                    JOIN blob_resources BR ON BR.id = R.id
                    JOIN blob_resources_attach BRA ON BRA.blob_resources = BR.id
                    LEFT JOIN locale L ON R.locale = L.id
                    ) T1 ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(T1.name) like(upper({0}))
                ]]>
            </criteria>
        </filter>

        <filter name="byValue">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(T1.resource_value) like(upper({0}))
                ]]>
            </criteria>
        </filter>

        <filter name="byType">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(T1.resource_type) like(upper({0}))
                ]]>
            </criteria>
        </filter>

        <filter name="byLocale">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(T1.locale_name) like(upper({0}))
                ]]>
            </criteria>
        </filter>
    </collection>

    <collection name="resource_locale_collection" idField="id">

        <prototype>
            <![CDATA[
                select
                    id,
                    name
                from
                    locale ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byText">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(name) like(upper({0}))
                ]]>
            </criteria>
        </filter>

    </collection>



    <collection name="global_settings_collection" idField="id">
        <prototype>
            <![CDATA[
                SELECT
                    T1.id,
                    T1.name,
                    T1."value",
                    T1."type"

                    FROM
                    (
                    SELECT
                    SS.id,
                    GS.name AS name,
                    SS.string_value AS "value",
                    'Строка' AS "type"
                    FROM global_server_settings GS
                    JOIN string_settings SS ON SS.id = GS.id

                    UNION

                    SELECT
                    BS.id,
                    GS.name AS name,
                    CAST(BS.boolean_value AS varchar) AS "value",
                    'Логический тип' AS "type"
                    FROM global_server_settings GS
                    JOIN boolean_settings BS ON BS.id = GS.id

                    UNION

                    SELECT
                    LS.id,
                    GS.name AS name,
                    CAST(LS.long_value AS varchar) AS "value",
                    'Число' AS "type"
                    FROM global_server_settings GS
                    JOIN long_settings LS ON LS.id = GS.id
                    ) T1 ::from-clause
                where
                    1=1 ::where-clause
            ]]>
        </prototype>

        <filter name="byName">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(T1.name) like(upper({0}))
                ]]>
            </criteria>
        </filter>

        <filter name="byValue">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(T1.value) like(upper({0}))
                ]]>
            </criteria>
        </filter>

        <filter name="byType">
            <criteria placeholder="where-clause">
                <![CDATA[
                    upper(T1.type) like(upper({0}))
                ]]>
            </criteria>
        </filter>
    </collection>


</configuration>
