<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<configuration xmlns="https://cm5.intertrust.ru/config">
    <!--
     Данная конфигурация, по сути, является исключетльно GUI-конфигурацией (поэтому и называется client-action).
     Серверная логика workflow оперирует строковым понятием. Обработчиком действия на клиенте и сервере является именованный компонент.
     "название действия" и каким-то его контекстом (доменным объектом, скорее всего)
    -->

    <!-- Если действие отсутствует в конфигурации, то
    1)  Действие отображается на экране с названием, сконфигурированным в Activiti. Например "sign".
        Когда будет реализована локализация, можно будет договориться о конвенции локализационных ключей типа
        "sign.action.default.text"
    2)  Иконка выбирается из images/actions/sign-action-default-image.png
    3)  Клиентский и серверный обработчики данного действия - это компоненты с названием "generic.workflow.action"
        -> аннотация @ComponentName("generic.workflow.action")
    4)  Передаваемые параметры - это Id доменного объекта и название действия (в данном примере - "sign")
    -->

    <!-- Пример конфигураций действий -->
    <!-- sign.action - это название действия. Компонент-обработчик данного действия определяется атрибутом component, и
    в классах GUI и сервера класс-обработчик данного действия аннотируется, например, @ComponentName("specific.sign.action") -
    аналогично обработчикам плагинов и виджетов. Если компонент-обработчик не определён, то действие считается действием
    Workflow и обрабатывается компонентом @ComponentName("generic.workflow.action")

    Контекст действия (например форма доменного объекта) должна обновляться по успешному завершению действия.
    В случае исключительной ситуации, клиент отображает сообщение об ошибке.

    show-text определяет, показывать ли текст действия, или достаточно только иконки
    -->
    <action name="start.process.action" component="start.process.action" text="Отправить на согласование" image="sign.png">
        <before-execution>
            <!-- Текст-подтверждение перед выполнением данного действия -->
            <confirmation-message text="Отправить на согласование?"/>

            <!-- Доменный объект, который требуется создать перед выполнением данного действия. При этом перед выполнением
            открывается форма редактирования этого доменного объекта
            form-name - параметр не обязательный, но позволяет выбрать форму, отличную от "по умолчанию"
            -->
            <!-- domain-object-to-create type="doc_sign" form-name="sign_default_form"/-->

            <!--Не обязательный атрибут, по умолчанию "true" - определяет, требуется ли сохранять доменный объект
            контекста действия (открытый доменный объект) перед выполнением -->
            <!-- save-context value="false"/-->
        </before-execution>

        <after-execution>
            <!-- Текст-подтверждение после выполнения данного действия -->
            <on-success-message text="Документ отправлен на согласование"/>
            <!--<refresh-context value="true"/>-->
        </after-execution>
        <action-settings>
            <process-action class-name="start-process"  process-name="execution"/>
        </action-settings>
    </action>

    <!-- will be investigated -->
    <!--<action-context name="sign">-->
        <!--<domain-object-context>-->
            <!--<type name="Outgoing_Document"/>-->
            <!--<type name="Internal_Document"/>-->
            <!--<Status>OnRegistration</Status>-->
        <!--</domain-object-context>-->
        <!--<action name="sign.action"/>-->
    <!--</action-context>-->
</configuration>
