"Denis Mitavskiy" <dmitavsky@gmail.com> 
23.04.2013 18:01 	 
	

Ниже представлено то видение архитектуры, которое мы сегодня обсуждали на совещании. Если я что-то упустил, дайте мне знать, чтобы я это учел в составляемых иллюстрациях. Жирным шрифтом выделено то, о чем я хотел сказать, но забыл или еще не знал :) 
 
1. App. server - JBoss 7 
2. RDBMS - Postgres 9.x (текущая версия 9.2) + Oracle 11g (дата выхода 12c до сих пор неизвестна) 
3. Слои (логические) следующие: 
  - Конфигурация (следует определиться с реализацией, возможно использование Apache Commons Configuration) 
  - Бизнес-логика (EJB + Spring). EJB - декларативная транзакционность, Spring - расширяемость бизнес-логики. 
  - Подменяемый слой DAO - в том числе отвечающий за автоматическое создание мета-информации - таблиц, ключей, индексов. 
  - Слой DAO интегрируется с подсистемой фильтрации по правам. Возможно, фильтарция тоже будет вынесена в отдельный слой (компонентом, модулем), но задача не первоочередная 
  - Слой интеграции c CM4 (трансформация REST-запросов в вызовы бизнес-методов и результатов в REST-запросы). Организация слоя пока не ясна, из вариантов: собственная имплементация, сервлет + REST-сервисы JavaEE, сервлет + REST-сервисы Spring. 
  - Веб-сервисы (SOAP/REST) 
  - Бизнес-логика интегрирована с Activiti, отвечающим за Workflow 
  - Слой GUI (администрирование) предлагается разрабатывать с использованием Vaadin. Почему: 
      1) GWT частично (не полностью) отдан на разработку и поддержку команде Vaadin 
      2) Отсутствие необходимости поиска консенсусов Java-"GWT-Java" 
      3) Проблем с производительностью уже очень мало, тем более, что по тому же принципу работает JSF - один из JavaEE стандартов 
      4) Много визуальных "тем", простота подстройки базовых элементов существующих тем 
      5) Нет необходимости компилировать GWT, тратить время на огрехи Dev Mode, и без того медленного. Средняя скорость разработки и багфиксинга увеличивается за счет этого на 50-100% (прикидки, не замерял) 
      6) Отличная документация и очень большое сообщество по сравнению с GXT 
      7) GXT-проект перешел в фазу некоторой "стагнации", что настораживает 
      8) Vaadin поддерживает "клиенто-ориентированную" разработку (https://vaadin.com/book/-/page/clientsideapp.html, https://vaadin.com/gwt) с использованием классических GWT-подходов. Более того, коммерческая поддержка Vaadin  уже включает в себя поддерку GWT-проектов. 
      9) Лицензия Apache против LGPL в случае GXT 
   Из минусов Vaadin следует упомянуть отсутствие Charts в бесплатном наборе компонентов. 
 
4. Структура хранилища СУБД определяется конфигурационно 
5. Архитектура должна обеспечивать максимально простую (с точки зрения настройки и использования) поддержку Unit-тестирования и интеграционного тестирования 
 
Что требуется обсудить до того, как запускать в работу: 
1. Коллекции (?аналог атрибутов с множеством значений?) 
2. Безопасность, защита информации 
3. CM4 – посмотреть систему, «поиграться», исходный код 
4. Поддержка версионности объектов 